AWSTemplateFormatVersion: "2010-09-09"
Description: Set up auto scaling application resources - CSYE 6225 Spring 2020

Parameters:

  Networkstack:
    Description: Network stack name
    Type: String

  AppGroupName:
    Description: Application group name
    Type: String

  ELBGroupName:
    Description: Application group name
    Type: String
  
  RdsGroupName:
    Description: RDS Group name
    Type: String
  
  ELBLaunchConfigName:
    Description: Launch configuration name for load balancer
    Type: String
    Default: asg_launch_config

  InstanceType:
    Description: InstanceType
    Type: String
    Default: t2.micro

  KeyName:
    Description: Key name
    Type: String

  AmiId:
    Description: AMI ID
    Type: String

  VolumeSize:
    Description: Volume Size
    Type: String
  
  DBSubnetGroupName:
    Description: DB subnet group name
    Type: String
    Default: "mydbsubnet"
    
  DBInstanceID:
    Description: My database instance
    Type: String
    MinLength: 1
    MaxLength: 63
    Default: "csye6225-spring2020"

  DBName:
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
  
  DBInstanceClass:
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
    Default: db.t3.micro
  
  DBAllocatedStorage:
    Description: The size of the database (GiB)
    Type: Number
    MinValue: 5
    MaxValue: 1024
    ConstraintDescription: must be between 20 and 65536 GiB.
    Default: 20
  
  Engine:
      Description: Engine name
      Type: String
      Default: postgres

  EngineVersion:
    Description: Engine version
    Type: String
    Default: 10.11

  MultiAZ:
    Description: Engine version
    Type: String

  PubliclyAccessible:
    Description: Engine version
    Type: String
    Default: "false"

  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: 1
    MaxLength: 16
  
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: 8
    MaxLength: 41

  AutoScalingGroupName:
    Description: Auto scaling group name
    Type: String

  AutoScalingCooldownPeriod:
    Description: cool down period for auto scaling group
    Type: String

  DesiredCapacity:
    Description: Desired capacity for auto scaling group
    Type: String

  MaxSize:
    Description: Maximum capacity for auto scaling group
    Type: String

  MinSize:
    Description: Minimum capacity for auto scaling group
    Type: String
  
  ELBTargetGroupName:
    Description: target group for load balancer
    Type: String

  ELBName:
    Description: Name of load balancer
    Type: String

  AlarmThresholdLow:
    Description: Threshold to set alarm low alert
    Type: String

  AlarmThresholdHigh:
    Description: Threshold to set alarm high alert
    Type: String

  HostedZone:
    Description: DNS hosted zone
    Type: String

  DueBillSNSTopicName:
    Description: Name of the SNS Topic
    Type: String

  DueBillSQSQueueName:
    Description: Name of the SQS Queue
    Type: String

  WebAppEC2S3PolicyName:
    Description: Policy name
    Type: String
    Default: "WebAppS3"

  CodeDeployEC2S3PolicyName:
    Description: CodeDeployEC2S3 policy name
    Type: String
    Default: CodeDeploy-EC2-S3

  CircleCiUploadToS3PolicyName:
    Description: CircleCiUploadToS3 policy name
    Type: String
    Default: CircleCI-Upload-To-S3

  CircleCICodeDeployPolicyName:
    Description: CircleCICodeDeploy policy name
    Type: String
    Default: CircleCI-Code-Deploy

  CircleCiEc2AmiPolicyName:
    Description: CircleCiEc2Ami policy name
    Type: String
    Default: circleci-ec2-ami

  CodeDeployEC2ServiceRoleName:
    Description: Code Deploy EC2 service role name
    Type: String
    Default: CodeDeployEC2ServiceRole

  CodeDeployServiceRoleName:
    Description: Code Deploy service role name
    Type: String
    Default: CodeDeployServiceRole

  SNSTopicSubscribePolicyName:
    Description: Policy name for SNS topic subscribe
    Type: String
    Default: SNS-Topic-Subscribe

  CircleCILambdaPolicyName:
    Description: Policy name for circleci to access lambda
    Type: String
    Default: CirlceCI-Lambda

  CirlceCILambdaS3PolicyName:
    Description: Policy name for circleci lambda to get objects from s3
    Type: String
    Default: CirlceCI-Lambda-Get-From-S3

  AppName:
    Description: Application name
    Type: String
    Default: csye6225-webapp

  DeploymentGroupName:
    Description: Deployment Group name
    Type: String
    Default: csye6225-webapp-deployment

  CodeDeployBucket:
    Description: CodeDeploy Bucket name
    Type: String


Resources:
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
         !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "VPCID" ]]
      GroupName: !Ref ELBGroupName
      GroupDescription: Allow http traffic to webserver
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: To allow world for port 80
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref "AWS::StackName", !Ref "AWS::Region", "ELBSecurityGroup" ]]

  SecurityGroupApp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "VPCID" ]]
      GroupDescription: SecurityGroup to access web application
      GroupName: !Ref AppGroupName
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ELBSecurityGroup
          Description: Load balancer Security Group added
          FromPort: 8080
          ToPort: 8080
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref "AWS::StackName", !Ref "AWS::Region", "SecurityGroupApp" ]]
  
  SecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
         !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "VPCID" ]]
      GroupDescription: SecurityGroup to access database
      GroupName: !Ref RdsGroupName
      SecurityGroupIngress:
        - Description: To allow world for port 5432
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref SecurityGroupApp
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref "AWS::StackName", !Ref "AWS::Region", "SecurityGroupRds" ]]

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB subnet group for RDS
      SubnetIds:
        - Fn::ImportValue:
           !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "PublicSub1" ]]
        - Fn::ImportValue:
           !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "PublicSub2" ]]
        - Fn::ImportValue:
           !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "PublicSub3" ]]
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref "AWS::StackName", !Ref "AWS::Region", "DBSubnetGroupName" ]]

  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: !Ref Engine
      EngineVersion: !Ref EngineVersion
      MultiAZ: !Ref MultiAZ
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: !Ref PubliclyAccessible
      VPCSecurityGroups: 
        - !Ref SecurityGroupRDS
      DBSubnetGroupName: !Ref DBSubnetGroup
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref "AWS::StackName", !Ref "AWS::Region", "RDSInstance" ]]
  
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: 
        - !Ref CodeDeployEC2ServiceRole

  AutoScalingLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: RDSInstance
    Properties:
      AssociatePublicIpAddress: True
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups: 
        - !Ref SecurityGroupApp
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: True
            VolumeSize: !Ref VolumeSize
      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - "#!/bin/bash -xe "
            - cd /opt/tomcat/bin
            - sudo touch setenv.sh
            - sudo chmod 777 setenv.sh
            - Fn::Join:
              - ''
              - - sudo echo "JAVA_OPTS='
                - " -Dspring.datasource.username="
                - Fn::Join:
                  - ''
                  - - Ref: DBUsername
                - " -Dspring.datasource.password="
                - Fn::Join:
                  - ''
                  - - Ref: DBPassword
                - " -Dspring.profiles.active="
                - aws" -Dspring.datasource.url=jdbc:postgresql://"
                - Fn::GetAtt:
                  - RDSInstance
                  - Endpoint.Address
                - ":5432/"
                - Fn::Join:
                  - ''
                  - - Ref: DBName
                - " -DamazonProperties.bucketName="
                - Fn::Join:
                  - ''
                  - - Ref: S3Bucket
                - " -DamazonProperties.endpointUrl="
                - Fn::GetAtt:
                  - RDSInstance
                  - Endpoint.Address
                - " -Dsqs.queue.name="
                - Fn::Join:
                  - ''
                  - - Ref: DueBillSQSQueueName
                - " -Daws.topic.name="
                - Fn::Join:
                  - ''
                  - - Ref: DueBillSNSTopicName
                - '''" >> /opt/tomcat/bin/setenv.sh'
            - sudo systemctl restart tomcat.service

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupName
      Cooldown: !Ref AutoScalingCooldownPeriod
      LaunchConfigurationName: !Ref AutoScalingLaunchConfig
      DesiredCapacity: !Ref DesiredCapacity
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      TargetGroupARNs:
        - Ref: ELBTargetGroup
      VPCZoneIdentifier:
        - Fn::ImportValue:
           !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "PublicSub1" ]]
        - Fn::ImportValue:
           !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "PublicSub2" ]]
        - Fn::ImportValue:
           !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "PublicSub3" ]]
      Tags:
        - Key: Name
          Value: !Ref ELBLaunchConfigName
          PropagateAtLaunch: True

  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref ELBTargetGroupName
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: 8080
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 5
      HealthCheckPath: "/"
      Port: 8080
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "VPCID" ]]
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20
      Tags:
        - Key: Name
          Value: !Ref ELBLaunchConfigName

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref ELBName
      Scheme: internet-facing
      SecurityGroups:
        - Ref: ELBSecurityGroup
      Type: application
      IpAddressType: ipv4
      Subnets:
        - Fn::ImportValue:
           !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "PublicSub1" ]]
        - Fn::ImportValue:
           !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "PublicSub2" ]]
        - Fn::ImportValue:
           !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "PublicSub3" ]]
      Tags:
        - Key: Name
          Value: !Ref ELBLaunchConfigName

  # ELBListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     Certificates:
  #       - CertificateArn: !Ref CertificateArn
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref ELBTargetGroup
  #     LoadBalancerArn: !Ref ElasticLoadBalancer
  #     Port: 443
  #     Protocol: HTTPS

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup
        # - Type: redirect
        #   RedirectConfig:
        #     Protocol: HTTPS
        #     Port: 443
        #     StatusCode: HTTP_301
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: HTTP

  Route53Records:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join ['', [!Ref HostedZone, "." ]]
      Name: !Join ['', [!Ref HostedZone, "." ]]
      Comment: Domain for my instance
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - ElasticLoadBalancer
            - DNSName
        EvaluateTargetHealth: True
        HostedZoneId:
          Fn::GetAtt:
            - ElasticLoadBalancer
            - CanonicalHostedZoneID
      Type: A
  
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 10
      ScalingAdjustment: 1

  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 10
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 10% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: !Ref AlarmThresholdHigh
      AlarmActions:
        - Ref: WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 5% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: !Ref AlarmThresholdLow
      AlarmActions:
        - Ref: WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoScalingGroup
      ComparisonOperator: LessThanThreshold

  DueBillSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Ref DueBillSNSTopicName
      TopicName: !Ref DueBillSNSTopicName

  DueBillSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref DueBillSQSQueueName

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      # To create private bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'true'
        IgnorePublicAcls: 'true'
        BlockPublicPolicy: 'true'
        RestrictPublicBuckets: 'true'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: StandardIARule
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA

  WebAppEC2S3Policy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - CodeDeployEC2ServiceRole
    Properties:
      ManagedPolicyName: !Ref WebAppEC2S3PolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:Get*"
              - "s3:Delete*"
              - "s3:Put*"
              - "s3:List*"
            Resource: !Join ['', ["arn:aws:s3:::", !Ref S3Bucket, "/*" ]]
      # Add a new IAM managed policy to an existing IAM role
      Roles:
        - !Ref CodeDeployEC2ServiceRole
  
  CodeDeployEC2S3Policy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - CodeDeployEC2ServiceRole
    Properties:
      ManagedPolicyName: !Ref CodeDeployEC2S3PolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetAccountPublicAccessBlock
              - s3:ListAllMyBuckets
              - s3:ListJobs
            Resource: '*'
          - Effect: "Allow"
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref CodeDeployBucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref CodeDeployBucket, '/*']]
      Roles:
        - !Ref CodeDeployEC2ServiceRole

  CircleCIUploadToS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref CircleCiUploadToS3PolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 's3:PutObject'
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref CodeDeployBucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref CodeDeployBucket, '/*']]
      Users:
        - 'circleci'

  CircleCICodeDeployPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref CircleCICodeDeployPolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'codedeploy:RegisterApplicationRevision'
              - 'codedeploy:GetApplicationRevision'
            Resource:
              - Fn::Join:
                - ':'
                - - arn:aws:codedeploy
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - application
                  - Ref: AppName
          - Effect: 'Allow'
            Action:
              - 'codedeploy:CreateDeployment'
              - 'codedeploy:GetDeployment'
            Resource: 
              - '*'
          - Effect: 'Allow'
            Action:
              - 'codedeploy:GetDeploymentConfig'
            Resource:
              - Fn::Join:
                - ':'
                - - arn:aws:codedeploy
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - deploymentconfig
                  - CodeDeployDefault.AllAtOnce
      Users:
        - 'circleci'

  CircleCiEc2AmiPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref CircleCiEc2AmiPolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ec2:AttachVolume
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:CopyImage
          - ec2:CreateImage
          - ec2:CreateKeypair
          - ec2:CreateSecurityGroup
          - ec2:CreateSnapshot
          - ec2:CreateTags
          - ec2:CreateVolume
          - ec2:DeleteKeyPair
          - ec2:DeleteSecurityGroup
          - ec2:DeleteSnapshot
          - ec2:DeleteVolume
          - ec2:DeregisterImage
          - ec2:DescribeImageAttribute
          - ec2:DescribeImages
          - ec2:DescribeInstances
          - ec2:DescribeInstanceStatus
          - ec2:DescribeRegions
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSnapshots
          - ec2:DescribeSubnets
          - ec2:DescribeTags
          - ec2:DescribeVolumes
          - ec2:DetachVolume
          - ec2:GetPasswordData
          - ec2:ModifyImageAttribute
          - ec2:ModifyInstanceAttribute
          - ec2:ModifySnapshotAttribute
          - ec2:RegisterImage
          - ec2:RunInstances
          - ec2:StopInstances
          - ec2:TerminateInstances
          Resource: "*"
      Users:
        - 'circleci'

  CodeDeployEC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref CodeDeployEC2ServiceRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - codedeploy.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
      Path: "/"
      RoleName: !Ref CodeDeployServiceRoleName

  SNSTopicSubscribePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref SNSTopicSubscribePolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource:
              Ref: DueBillSNSTopic
      Roles:
        - Ref: CodeDeployEC2ServiceRole

  SQSQueuePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sqs:*
            Resource:
              - Fn::GetAtt:
                - DueBillSQSQueue
                - Arn
      PolicyName: CodeDeploy-EC2-SQSQueue
      Roles:
        - Ref: CodeDeployEC2ServiceRole

  CircleCILambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref CircleCILambdaPolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:*
              - iam:PassRole
            Resource: '*'
      Users:
        - 'circleci'

  CirlceCILambdaS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref CirlceCILambdaS3PolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref CodeDeployBucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref CodeDeployBucket, '/*']]
      Users:
        - 'circleci'

  WebAppApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Ref AppName
      ComputePlatform: Server

  WebappDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: CodeDeployServiceRole
    Properties:
      ApplicationName:
        Ref: WebAppApplication
      DeploymentGroupName:
        Ref: DeploymentGroupName
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      Ec2TagFilters:
        - Key: Name
          Value: !Ref ELBLaunchConfigName
          Type: KEY_AND_VALUE
      LoadBalancerInfo:
        # ElbInfoList:
          # - Name: !Ref ElasticLoadBalancer
        TargetGroupInfoList:
          - Name:
              Fn::GetAtt:
                - ELBTargetGroup
                - TargetGroupName
      AutoRollbackConfiguration:
        Enabled: True
        Events:
          - DEPLOYMENT_FAILURE
      ServiceRoleArn:
        Fn::GetAtt:
          - CodeDeployServiceRole
          - Arn

Outputs:
  DueBillTopicARN:
    Description: Topic ARN for Lambda to subscribe
    Value:
      Ref: DueBillSNSTopic
    Export:
      Name: DueBillTopicARN
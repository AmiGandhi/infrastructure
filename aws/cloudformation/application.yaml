AWSTemplateFormatVersion: "2010-09-09"
Description: "Set up application resources - CSYE 6225 Spring 2020"

Parameters:
  
  PolicyName:
      Description: Policy name
      Type: String
      Default: "WebAppS3"

  RoleName:
      Description: Role name
      Type: String
      Default: "EC2-CSYE6225"

  DBSubnetGroupName:
    Description: DB subnet group name
    Type: String
    Default: "mydbsubnet"

  Networkstack:
    Description: Network stack name
    Type: String

  AppGroupName:
    Description: Application group name
    Type: String

  RdsGroupName:
    Description: RDS Group name
    Type: String
  
  DBInstanceID:
    Description: My database instance
    Type: String
    MinLength: 1
    MaxLength: 63
    Default: "csye6225-spring2020"

  DBName:
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
  
  DBInstanceClass:
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
    Default: db.t3.micro
  
  DBAllocatedStorage:
    Description: The size of the database (GiB)
    Type: Number
    MinValue: 5
    MaxValue: 1024
    ConstraintDescription: must be between 20 and 65536 GiB.
    Default: 20
  
  Engine:
      Description: Engine name
      Type: String
      Default: postgres

  EngineVersion:
    Description: Engine version
    Type: String
    Default: 10.11

  MultiAZ:
    Description: Engine version
    Type: String

  PubliclyAccessible:
    Description: Engine version
    Type: String
    Default: "false"

  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: 1
    MaxLength: 16
  
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: 8
    MaxLength: 41

  Ec2InstanceType:
    Description: Ec2InstanceType
    Type: String
    Default: "t2.micro"

  KeyName:
    Description: Key name
    Type: String

  AmiId:
    Description: AMI ID
    Type: String

  VolumeSize:
    Description: Volume Size
    Type: String

  CodeDeployEC2S3PolicyName:
    Description: CodeDeployEC2S3 policy name
    Type: String
    Default: "CodeDeploy-EC2-S3"

  CodeDeployBucket:
    Description: CodeDeploy Bucket name
    Type: String
    Default: "codedeploy.amigandhi.me"

  CircleCiUploadToS3PolicyName:
    Description: CircleCiUploadToS3 policy name
    Type: String
    Default: "CircleCI-Upload-To-S3"

  CircleCICodeDeployPolicyName:
    Description: CircleCICodeDeploy policy name
    Type: String
    Default: "CircleCI-Code-Deploy"

  CircleCiEc2AmiPolicyName:
    Description: CircleCiEc2Ami policy name
    Type: String
    Default: "circleci-ec2-ami"

  CodeDeployServicePolicyName:
    Description: CodeDeployService policy name
    Type: String
    Default: "codedeploy-bucket"

  CodeDeployEC2ServiceRoleName:
    Description: Code Deploy EC2 service role name
    Type: String
    Default: "CodeDeployEC2ServiceRole"

  CodeDeployServiceRoleName:
    Description: Code Deploy service role name
    Type: String
    Default: "CodeDeployServiceRole"

  AppName:
    Description: Application name
    Type: String
    Default: "csye6225-webapp"

  DeploymentGroupName:
    Description: Deployment Group name
    Type: String
    Default: "csye6225-webapp-deployment"

  EC2InstanceName:
    Description: EC2 instance for webapp
    Type: String
    Default: "csye6225-webapp"

Resources:
  SecurityGroupApp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
         !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "VPCID" ]]
      GroupDescription: SecurityGroup to access web application
      GroupName: !Ref AppGroupName
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: To allow world for port 80
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          Description: To allow world for port 8080
          FromPort: 8080
          ToPort: 8080
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          Description: To allow world for port 22
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          Description: To allow world for port 443
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref "AWS::StackName", !Ref "AWS::Region", "application" ]]
  
  SecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue:
         !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "VPCID" ]]
      GroupDescription: SecurityGroup to access database
      GroupName: !Ref RdsGroupName
      SecurityGroupIngress:
        - Description: To allow world for port 5432
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref SecurityGroupApp
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref "AWS::StackName", !Ref "AWS::Region", "database" ]]

  # WebAppEC2S3Policy:
  #   Type: 'AWS::IAM::ManagedPolicy'
  #   Properties:
  #     ManagedPolicyName: !Ref PolicyName
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: "Allow"
  #           Action:
  #             - "s3:Get*"
  #             - "s3:Delete*"
  #             - "s3:Put*"
  #             - "s3:List*"
  #           Resource: !Join ['', ["arn:aws:s3:::", !Ref S3Bucket, "/*" ]]
  #     # Add a new IAM managed policy to an existing IAM role
  #     Roles:
  #       - !Ref WebAppEC2S3Role

  # WebAppEC2S3Role:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     RoleName: !Ref RoleName
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - ec2.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'

  
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: DB subnet group for RDS
      SubnetIds:
        - Fn::ImportValue:
           !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "PublicSub1" ]]
        - Fn::ImportValue:
           !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "PublicSub2" ]]
        - Fn::ImportValue:
           !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "PublicSub3" ]]
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref "AWS::StackName", !Ref "AWS::Region", "DBSubnetGroupName" ]]

  RDSInstance:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: "Delete"
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: !Ref Engine
      EngineVersion: !Ref EngineVersion
      MultiAZ: !Ref MultiAZ
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: !Ref PubliclyAccessible
      VPCSecurityGroups: 
        - !Ref SecurityGroupRDS
      DBSubnetGroupName: !Ref DBSubnetGroup
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref "AWS::StackName", !Ref "AWS::Region", "RDSInstance" ]]
  
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles: 
        - !Ref CodeDeployEC2ServiceRole

  EC2Instance:
    Type: "AWS::EC2::Instance"
    DependsOn: RDSInstance
    Properties:
      DisableApiTermination: False
      ImageId: !Ref AmiId
      InstanceType: !Ref Ec2InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds: 
        - !Ref SecurityGroupApp
      # AvailabilityZone: "us-east-1a"
      SubnetId:
        Fn::ImportValue:
         !Join ['-', [!Ref Networkstack, !Ref "AWS::Region", "PublicSub1" ]]
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda2
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: True
            VolumeSize: !Ref VolumeSize
      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - "#!/bin/bash -xe "
            - cd /opt/tomcat/bin
            - sudo touch setenv.sh
            - sudo chmod 777 setenv.sh
            - Fn::Join:
              - ''
              - - sudo echo "JAVA_OPTS='
                - " -Dspring.datasource.username="
                - Fn::Join:
                  - ''
                  - - Ref: DBUsername
                - " -Dspring.datasource.password="
                - Fn::Join:
                  - ''
                  - - Ref: DBPassword
                - " -Dspring.profiles.active=aws -Dspring.datasource.url=jdbc:postgresql://"
                - Fn::GetAtt:
                  - RDSInstance
                  - Endpoint.Address
                - ":5432/"
                - Fn::Join:
                  - ''
                  - - Ref: DBName
                - " -DamazonProperties.bucketName="
                - Fn::Join:
                  - ''
                  - - Ref: S3Bucket
                - " -DamazonProperties.endpointUrl="
                - Fn::GetAtt:
                  - RDSInstance
                  - Endpoint.Address
                - '''" >> /opt/tomcat/bin/setenv.sh'
            - sudo systemctl restart tomcat.service
      Tags:
        - Key: Name
          Value: !Ref EC2InstanceName

  S3Bucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: "Delete"
    Properties:
      # To create private bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'true'
        IgnorePublicAcls: 'true'
        BlockPublicPolicy: 'true'
        RestrictPublicBuckets: 'true'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: StandardIARule
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: "STANDARD_IA"

  # CodeDeployEC2S3Policy:
  #   Type: 'AWS::IAM::ManagedPolicy'
  #   Properties:
  #     ManagedPolicyName: !Ref CodeDeployEC2S3PolicyName
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - s3:GetAccountPublicAccessBlock
  #             - s3:ListAllMyBuckets
  #             - s3:ListJobs
  #           Resource: "*"
  #         - Effect: "Allow"
  #           Action:
  #             - "s3:Get*"
  #             - "s3:List*"
  #           Resource: !Join ['', ["arn:aws:s3:::", !Ref CodeDeployBucket, "/*" ]]

  CircleCIUploadToS3Policy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Ref CircleCiUploadToS3PolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:PutObject"
              - "s3:ListBucket"
            Resource: !Join ['', ["arn:aws:s3:::", !Ref CodeDeployBucket, "/*" ]]
      Users:
        - "circleci"

  CircleCICodeDeployPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Ref CircleCICodeDeployPolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Action:
              - "codedeploy:RegisterApplicationRevision"
              - "codedeploy:GetApplicationRevision"
            Resource:
              - Fn::Join:
                - ":"
                - - arn:aws:codedeploy
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - application
                  - Ref: AppName
          - Effect: "Allow"
            Action:
              - "codedeploy:CreateDeployment"
              - "codedeploy:GetDeployment"
            Resource: 
              - "*"
          - Effect: "Allow"
            Action:
              - "codedeploy:GetDeploymentConfig"
            Resource:
              - Fn::Join:
                - ":"
                - - arn:aws:codedeploy
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - deploymentconfig
                  - CodeDeployDefault.AllAtOnce
      Users:
        - "circleci"

  CircleCiEc2AmiPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Ref CircleCiEc2AmiPolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ec2:AttachVolume
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:CopyImage
          - ec2:CreateImage
          - ec2:CreateKeypair
          - ec2:CreateSecurityGroup
          - ec2:CreateSnapshot
          - ec2:CreateTags
          - ec2:CreateVolume
          - ec2:DeleteKeyPair
          - ec2:DeleteSecurityGroup
          - ec2:DeleteSnapshot
          - ec2:DeleteVolume
          - ec2:DeregisterImage
          - ec2:DescribeImageAttribute
          - ec2:DescribeImages
          - ec2:DescribeInstances
          - ec2:DescribeInstanceStatus
          - ec2:DescribeRegions
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSnapshots
          - ec2:DescribeSubnets
          - ec2:DescribeTags
          - ec2:DescribeVolumes
          - ec2:DetachVolume
          - ec2:GetPasswordData
          - ec2:ModifyImageAttribute
          - ec2:ModifyInstanceAttribute
          - ec2:ModifySnapshotAttribute
          - ec2:RegisterImage
          - ec2:RunInstances
          - ec2:StopInstances
          - ec2:TerminateInstances
          Resource: "*"
      Users:
        - "circleci"

  CodeDeployEC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      RoleName: !Ref CodeDeployEC2ServiceRoleName

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codedeploy.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
      Path: "/"
      RoleName: !Ref CodeDeployServiceRoleName

  WebAppApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Ref AppName
      ComputePlatform: Server

  WebappDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: CodeDeployServiceRole
    Properties:
      ApplicationName:
        Ref: WebAppApplication
      DeploymentGroupName:
        Ref: DeploymentGroupName
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      Ec2TagFilters:
      - Key: Name
        Value: !Ref EC2InstanceName
        Type: KEY_AND_VALUE
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events:
        - DEPLOYMENT_FAILURE
      ServiceRoleArn:
        Fn::GetAtt:
          - CodeDeployServiceRole
          - Arn
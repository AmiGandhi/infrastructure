AWSTemplateFormatVersion: "2010-09-09"
Description: "Set up application resources - CSYE 6225 Spring 2020"

Parameters:

  BucketName:
      Description: Bucket Name
      Type: String
      Default: "mybucket"

  BucketNameForWebapp:
      Description: Bucket name for storing attachments
      Type: String
      Default: "mybucketforwebapp"
  
  PolicyName:
      Description: Policy name
      Type: String
      Default: "mypolicy"

  RoleName:
      Description: Role name
      Type: String
      Default: "myrole"

  DBSubnetGroupName:
    Description: DB subnet group name
    Type: String
    Default: "mydbsubnet"
  
  DBInstanceID:
    Description: My database instance
    Type: String
    MinLength: 1
    MaxLength: 63
    Default: "csye6225spring2020"

  DBName:
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    Default: "csye6225"
  
  DBInstanceClass:
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
    Default: db.t3.micro
  
  DBAllocatedStorage:
    Description: The size of the database (GiB)
    Type: Number
    MinValue: 5
    MaxValue: 1024
    ConstraintDescription: must be between 20 and 65536 GiB.
    Default: 50
  
  Engine:
      Description: Engine name
      Type: String
      Default: postgres

  EngineVersion:
    Description: Engine version
    Type: String
    Default: 10.11

  MultiAZ:
    Description: Engine version
    Type: String
    Default: False

  PubliclyAccessible:
    Description: Engine version
    Type: String
    Default: False

  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: 1
    MaxLength: 16
    Default: "csye6225user"
  
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: 8
    MaxLength: 41
    Default: "csye6225password"

  KeyName:
    Description: Key name
    Type: String


Resources:
  SecurityGroupApp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue VPCID
      GroupDescription: SecurityGroup to access web application
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: To allow world for port 80
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          Description: To allow world for port 8080
          FromPort: 8080
          ToPort: 8080
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          Description: To allow world for port 22
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          Description: To allow world for port 443
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: "ApplicationSecurityGroup"
  
  SecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue VPCID
      GroupDescription: SecurityGroup to access database
      SecurityGroupIngress:
        - Description: To allow world for port 5432
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref SecurityGroupApp
      Tags:
        - Key: Name
          Value: "DatabaseSecurityGroup"

  WebAppEC2S3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join ['', [!Ref "AWS::Region", !Ref PolicyName]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # - Effect: Allow
          #   Action:
          #     - 's3:Get*'
          #     - 's3:List*'
          #   Resource: !Join ['', ["arn:aws:s3", !Ref BucketName, "/*" ]]
          - Effect: "Allow"
            Action:
              - "s3:Get*"
              - "s3:List*"
              - "s3:Delete*"
              - "s3:Put*"
            Resource: !Join ['', ["arn:aws:s3:::", !Ref BucketName, "/*" ]]
      # Add a new IAM managed policy to an existing IAM role
      Roles: 
        - !Ref WebAppEC2S3Role

  WebAppEC2S3Role:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['', [!Ref "AWS::StackName", !Ref "AWS::Region", !Ref RoleName]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      # Add a new IAM managed policy to a new IAM role
      # ManagedPolicyArns:
      #   # Attach a new policy
      #   - !Ref WebAppEC2S3Policy
  
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: DB subnet group for RDS
      SubnetIds:
        - !ImportValue PublicSubnet1
        - !ImportValue PublicSubnet2
        - !ImportValue PublicSubnet3
      Tags:
        - Key: Name
          Value: "DBSubnetGroupName"

  RDSInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: !Ref Engine
      EngineVersion: !Ref EngineVersion
      MultiAZ: !Ref MultiAZ
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: !Ref PubliclyAccessible
      VPCSecurityGroups: 
        - !Ref SecurityGroupRDS
      DBSubnetGroupName: !Ref DBSubnetGroup
      Tags:
        - Key: String
          Value: String
  
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles: 
        - !Ref WebAppEC2S3Role

  EC2Instance:
    Type: "AWS::EC2::Instance"
    DependsOn: RDSInstance
    Properties:
      DisableApiTermination: False
      ImageId: "ami-07ebfd5b3428b6f4d"
      InstanceType: "t2.micro"
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds: 
        - !Ref SecurityGroupApp
      # AvailabilityZone: "us-east-1a"
      SubnetId: !ImportValue PublicSubnet1
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sdm
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: True
            VolumeSize: 20
      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - "#!/bin/bash -xe "
            - cd /opt/tomcat/bin
            - sudo touch setenv.sh
            - sudo chmod 777 setenv.sh
            - Fn::Join:
              - ''
              - - sudo echo "JAVA_OPTS='-Dspring.datasource.username=csye6225user -Dspring.datasource.password=csye6225password
                  -Dspring.datasource.url=jdbc:postgresql://
                - Fn::GetAtt:
                  - RDSInstance
                  - Endpoint.Address
                - ":5432/"
                - Fn::Join:
                  - ''
                  - - Ref: DBName
                - " -DamazonProperties.bucketName="
                - Fn::Join:
                  - ''
                  - - Ref: S3Bucket
                - " -DamazonProperties.endpointUrl="
                - Fn::GetAtt:
                  - myRDSDBInstance
                  - Endpoint.Address
                - '''" >> /opt/tomcat/bin/setenv.sh'
            - sudo systemctl restart tomcat.service

  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join ['', [!Ref "AWS::StackName", !Ref "AWS::Region", !Ref BucketName]]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: StandardIARule
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: "STANDARD_IA"

Outputs:
  S3Bucket:
    Description: The S3 bucket to store attachments
    Value: !Ref S3Bucket
    Export:
      Name: !Join ['', [!Ref "AWS::StackName", "-mys3bucket" ]]
AWSTemplateFormatVersion: "2010-09-09"
Description: "Setting up serverless resources - CSYE 6225 Spring 2020"

Parameters:
  LambdaExecutionRoleName:
    Description: Role name for executing lambda
    Type: String

  LambdaDynamoDBPolicyName:
    Description: Policy name for DynamoDB
    Type: String

  LambdaLogsPolicyName:
    Description: Policy name for Logs
    Type: String

  LambdaSESPolicyName:
    Description: Policy name for SES
    Type: String

  DueBillLambdaFunctionName:
    Description: lambda function name
    Type: String

  CodeDeployBucket:
    Description: CodeDeploy Bucket name
    Type: String

  DomainName:
    Description: Domain Name
    Type: String

  DynamoDBTableName:
      Description: Name of the DynamoDB table
      Type: String



Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: !Ref LambdaExecutionRoleName

  LambdaDynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref LambdaDynamoDBPolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource:
              Fn::ImportValue: DynamoDBTableARN
      Roles:
        - Ref: LambdaExecutionRole

  LambdaLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref LambdaLogsPolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      Roles:
        - Ref: LambdaExecutionRole

  LambdaSESPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref LambdaSESPolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'
      Roles:
        - Ref: LambdaExecutionRole

  DueBillLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: DueBills::getDueBills
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Code:
        S3Bucket: !Ref CodeDeployBucket
        S3Key: ROOT.war
      Runtime: java11
      FunctionName: !Ref DueBillLambdaFunctionName
      MemorySize: 256
      Timeout: 180
      Environment:
        Variables:
          DOMAIN_NAME: !Ref DomainName
          DYNAMO_TABLE: !Ref DynamoDBTableName

  LambdaResourcePolicy:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: DueBillLambdaFunction
      Principal: sns.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn:
        Fn::Join:
          - ':'
          - - arn:aws:sns:us-east-1
            - Ref: AWS::AccountId
            - 'due_bills'

  LambdaSNSSubscription:
    Type: AWS::SNS::Subscription
    DependsOn:
      - DueBillLambdaFunction
    Properties:
      Endpoint:
        Fn::GetAtt:
          - DueBillLambdaFunction
          - Arn
      Protocol: lambda
      TopicArn:
        Fn::ImportValue: DueBillTopicARN